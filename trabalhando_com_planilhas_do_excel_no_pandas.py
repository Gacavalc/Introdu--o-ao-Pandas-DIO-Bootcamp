# -*- coding: utf-8 -*-
"""Trabalhando com Planilhas do excel no Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SuZjSXgIefyWivPprx_BHsEMI44U-DCs
"""

#importando a biblioteca pandas
import pandas as pd

#Faz as leituras dos arquivos Excel 
df1 = pd.read_excel("Aracaju.xlsx")
df2 = pd.read_excel("Fortaleza.xlsx")
df3 = pd.read_excel("Natal.xlsx")
df4 = pd.read_excel("Recife.xlsx")
df5 = pd.read_excel("Salvador.xlsx")

df1.head()

#para concatenar todos os arquivos excel juntando todos eles 
df = pd.concat([df1,df2,df3,df4,df5])

df.head() #mostra as 5 primeiras linhas

df.tail()#mostra as 5 ultimas linhas

df.sample(5)#mostra 5 linhas aleatorias

#verificando os tipos de dados 
df.dtypes

#como alterar um typo de uma coluna , com isso a loja id nao sera calculada entao sera modificada para string
df["LojaID"] = df["LojaID"].astype("object")

df.head()

#consulta de linhas com valores Faltantes ou nulos 
df.isnull().sum()#a formula procura e soma onde ha valores nulos

#substituindo valores nulos se houver pela media 
df["Vendas"].fillna(df["Vendas"].mean(),inplace=True)

df["Vendas"].mean()

#substituindo os valores nulos por Zero 
df["Vendas"].fillna(0,inplace=True)

df.dropna(inplace=True)#apagando as linhas com valores nulos

df.dropna(subset=["vendas"],inplace=True)#apagando as linhas com valores nulos com base apenas em 1 coluna

#Removendo linhas que estejam com valores faltanes em todas as colunas
df.dropna(how="all",inplace=True)

"""Trabalhando com colunas novas !!!!

"""

#Criando a coluna de receita
df["Receita"] = df ["Vendas"].mul(df["Qtde"])#.mul de multiplicacao

df.head()#agora podemos ver a nova coluna receita criada

df["Receita/Vendas"] = df["Receita"] / df["Vendas"] #Caso nao tenha a quantidade foi realizado esse calculo para apresentar os valores

df.head()

#retornando a maior receita com o .max
df["Receita"].max()

#retornando a menor receita
df["Receita"].min()

#nlargest  retorna as 3  linhas com as maiores receitas
df.nlargest(3,"Receita")

#nsmllest Mostra a menor receita no top 3
df.nsmallest(3,"Receita")

#agrupamento por cidade
df.groupby("Cidade")["Receita"].sum()

#ordena o conjunto de dados 
df.sort_values("Receita",ascending=False).head(10)

"""Trabalhando com datas no Excel

"""

#Transformando a coluna de uma data em tipo inteiro 
df["Data"] =df["Data"].astype("int64")

df.dtypes

#Transformando a coluna de uma data em tipo inteiro 
df["Data"] =pd.to_datetime(df["Data"])

df.dtypes

#Agrupamento por ano 
df.groupby(df["Data"].dt.year)["Receita"].sum()

#Criando uma nova coluna com o ano 
df["Ano_Venda"] = df["Data"].dt.year

df.sample(5)

#Extraindo o mes e o dia 
df["mes_venda"],df["dia_venda"] = (df["Data"].dt.month,df["Data"].dt.day)

df.sample(5)

#retornando a data mais antiga 
df["Data"].min()

#Calculando a diferenca de dias 
df["diferenca_dias"] = df["Data"] - df["Data"].min()

df.sample(5)

#criando a coluna de trimestre
df["trimestre_venda"] = df["Data"].dt.quarter

df.sample(5)

#filtrando a coluna de trimestre 
df["semestra_venda"] = df["Data"].dt.quarter

df.sample(5)

#filtrando as vendas de 2019 mes de marco
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19.sample(5)

"""Visualizacao de dados com pandas

"""

df["LojaID"].value_counts(ascending=False)#methodo value counts verifica quantos id a loja tem

from pandas.core.arrays.interval import value_counts
#Grafico de barras verticais 
df["LojaID"].value_counts(ascending=False).plot.bar()#se quiser tirar a linha com matplotib e so colocar ; no final igual ao proximo exercicio

#Grafico de barras horizontais
df["LojaID"].value_counts().plot.barh();

#grafico com baras horizontais 
df["LojaID"].value_counts(ascending=True).plot.barh()

#Grafico de pizza 
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie()

#total de vendas por cidade 
df["Cidade"].value_counts()

#Adicionando um titulo e alterando o nome dos eixos 
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title="total de Vendas por Cidade")
plt.xlabel("Cidade")
plt.xlabel("Total Vendas");

#alterando a cor 

df["Cidade"].value_counts().plot.bar(title="total de Vendas por Cidade",color="red")
plt.xlabel("Cidade")
plt.xlabel("Total Vendas");

#Alterando o Estilo
plt.style.use("ggplot")

df.groupby(df["mes_venda"])["Qtde"].sum().plot()
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos");
plt.legend()

df.groupby(df["mes_venda"])["Qtde"].sum()

#Selecionando apenas as vendas de 2019
df_2019 = df[df["Ano_Venda"] == 2019 ]

from matplotlib.axes import mmarkers
#total produtos vendidos por mes 
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos");
plt.legend()

#Hisograma
plt.hist(df["Qtde"],color="magenta")

plt.scatter(x=df_2019["dia_venda"],y = df_2019["Receita"]);

#salvando em png
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.title("Quantidade de produtos vendidos X mes")
plt.xlabel("Mês")
plt.ylabel("Total de produtos vendidos")
plt.legend()
plt.savefig("grafico QTDE X Mês.png")